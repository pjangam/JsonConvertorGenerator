<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using Newtonsoft.Json;
using Tavisca.Platform.Common.Serialization;
using #=Namespace#;


<# 
var fileNamespace=Namespace;
#>
namespace <#=Namespace#>
{
    public class <#=ClassName#>Translator : JsonTranslator<<#=ClassName#>>
    {
        protected override <#=ClassName#> CreateNew()
        {
            return new <#=ClassName#>();
        }

        protected override void SetupParser(JsonParser<<#=ClassName#>> parser)
        {
                parser<#int propertiesCount=Properties.Count;
           foreach (var propertyName in Properties)
		   {
		   var camelCaseName=(propertyName.Name);
			if(Properties.IndexOf(propertyName)==propertiesCount-1)
		    {#>.Setup("<#=camelCaseName#>", (r, v) => <#=GetPropertySetter(propertyName)#>);
			<#}else{#>.Setup("<#=camelCaseName#>", (r, v) => <#=GetPropertySetter(propertyName)#>)
			<#}
			}#>

	 }
        protected override void Serialize(JsonWriter writer, <#=ClassName#> value, JsonSerializer serializer)
        {
             writer.WriteStartObject();
             writer<# 		 
		foreach (var propertyName in Properties)
		{
		var camelCaseName=(propertyName.Name);
		bool serializationRequired=IsSerializerRequired(propertyName);
		if(Properties.IndexOf(propertyName)==propertiesCount-1)
		{
		   if(!serializationRequired)
		    {
		    #>.WriteField("<#=camelCaseName#>", value.<#=propertyName.Name#>);
			<#}
		   else 
			{#>.WriteField("<#=camelCaseName#>", value.<#=propertyName.Name#>,serializer);
			<#}
			}	
		else
		{
		  if(!serializationRequired)
		   {
		   #>.WriteField("<#=camelCaseName#>", value.<#=propertyName.Name#>)
		   <#}
		   else
		   {#>.WriteField("<#=camelCaseName#>", value.<#=propertyName.Name#>,serializer)
		   <#}
		   }
		   }#>

	writer.WriteEndObject();
	    }
	}
 }