<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using Newtonsoft.Json;
using <#=Namespace#>;
using Newtonsoft.Json.Linq;
using System;
using Tavisca.USG.Common.WebAPIHandler;

namespace <#=Namespace#>.Translator
{
     public class <#=ClassName#>Translator: JsonConverter
     {
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            var actualObject = value as <#=ClassName#>;
            if (actualObject == null)
            {
                writer.WriteNull();
                return;
            }

            writer.WriteStartObject();
             <#int propertiesCount=Properties.Count; 		 
		foreach (var propertyName in Properties)
		{
		var camelCaseName=GetJsonPropertyName(propertyName);
		bool serializationRequired=IsSerializerRequired(propertyName);
		if(Properties.IndexOf(propertyName)==propertiesCount-1)
		{
		   if(!serializationRequired)
		    {
		    #>writer.WriteField("<#=GetJsonPropertyName(camelCaseName)#>", actualObject.<#=propertyName.Name#>);
			<#}
		   else 
			{#>writer.WriteField("<#=GetJsonPropertyName(camelCaseName)#>", actualObject.<#=propertyName.Name#>,serializer);
			<#}
			}	
		else
		{
		  if(!serializationRequired)
		   {
		   if(propertyName.PropertyType.IsGenericType&&propertyName.PropertyType.GetGenericTypeDefinition() == typeof(Nullable<>)){#>
		   if (actualObject.<#=propertyName.Name#> != null)
		   <#}#>writer.WriteField("<#=GetJsonPropertyName(camelCaseName)#>", actualObject.<#=propertyName.Name#>.ToString());
		   <#}
		   else
		   {#>writer.WriteField("<#=GetJsonPropertyName(camelCaseName)#>", actualObject.<#=propertyName.Name#>,serializer);
		   <#}
		   }		   
		   }#>
	writer.WriteEndObject();
        }

        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            var json = JToken.ReadFrom(reader) as JObject;
            if (json == null)
                return null;           
			
           <#foreach (var propertyName in Properties)
		   {
		     var camelCaseName=GetJsonPropertyName(propertyName.Name);
			 bool serializationRequired=IsSerializerRequired(propertyName);
			 if(!serializationRequired)
		    {
		    #><#=GetPropertySetter(propertyName)#>
			<#}
		   else 
			{#>var <#=camelCaseName#>=json.<#=GetPropertySetter(propertyName)#>,serializer);
			<#}			
			}#>
			<#foreach (var ConstructorParameters in ConstructorsParameters){#>
            var actualObject=new <#=ClassName#>( <#foreach (var propertyName in ConstructorParameters)		   {			 #><#=propertyName#>, <#}#>){
                <#foreach (var propertyName in Properties)   {			 #><#=propertyName.Name#>=<#=propertyName.Name#> ,
  <#}#>
            };
			<#}#>
			return actualObject;
        }
       public override bool CanConvert(Type objectType)
        {
            return typeof (<#=ClassName#>) == objectType;
        }
	}
 }